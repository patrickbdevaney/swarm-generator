import os
import json
from dotenv import load_dotenv
from swarms import Agent, GraphWorkflow, Node, NodeType, AgentRearrange
from groq import Groq
import gradio as gr

# Load environment variables
load_dotenv()
api_key = os.getenv("GROQ_API_KEY")
if not api_key:
    raise ValueError("GROQ_API_KEY environment variable is not set.")

# Retrieve the workspace directory from environment variables
WORKSPACE_DIR = os.getenv("WORKSPACE_DIR")
os.environ["WORKSPACE_DIR"] = WORKSPACE_DIR

# Initialize Groq client
client = Groq(api_key=api_key)

# Boilerplate code that should not be regenerated by Agent 2
boilerplate_code = """
import os
import json
from dotenv import load_dotenv
from swarms import Agent, GraphWorkflow, Node, NodeType
from groq import Groq
import gradio as gr

# Load environment variables
load_dotenv()
api_key = os.getenv("GROQ_API_KEY")
if not api_key:
    raise ValueError("GROQ_API_KEY environment variable is not set.")

# Retrieve the workspace directory from environment variables
WORKSPACE_DIR = os.getenv("WORKSPACE_DIR")
os.environ["WORKSPACE_DIR"] = WORKSPACE_DIR

# Initialize Groq client
client = Groq(api_key=api_key)
"""

# Swarm templates based on organizational structures
swarm_templates = {
    "Hierarchical": """
    # Hierarchical structure template
    supervisor = Agent(agent_name="Supervisor", system_prompt="Oversee the team", task="Manage team")
    team_lead = Agent(agent_name="Team Lead", system_prompt="Assist with task execution", task="Lead team")
    worker = Agent(agent_name="Worker", system_prompt="Perform assigned tasks", task="Execute tasks")
    workflow = GraphWorkflow()
    workflow.add_node(Node(id="supervisor", type=NodeType.AGENT, agent=supervisor))
    workflow.add_node(Node(id="team_lead", type=NodeType.AGENT, agent=team_lead))
    workflow.add_node(Node(id="worker", type=NodeType.AGENT, agent=worker))
    """,
    "Parallel": """
    # Parallel structure template
    agent1 = Agent(agent_name="Agent 1", system_prompt="Process task 1", task="Process data")
    agent2 = Agent(agent_name="Agent 2", system_prompt="Process task 2", task="Process data")
    workflow = GraphWorkflow()
    workflow.add_node(Node(id="agent1", type=NodeType.AGENT, agent=agent1))
    workflow.add_node(Node(id="agent2", type=NodeType.AGENT, agent=agent2))
    """,
    "Sequential": """
    # Sequential structure template
    agent1 = Agent(agent_name="Agent 1", system_prompt="Process task 1", task="Process data")
    agent2 = Agent(agent_name="Agent 2", system_prompt="Process task 2", task="Process data")
    workflow = GraphWorkflow()
    workflow.add_node(Node(id="agent1", type=NodeType.AGENT, agent=agent1))
    workflow.add_node(Node(id="agent2", type=NodeType.AGENT, agent=agent2))
    workflow.add_edge("agent1", "agent2")
    """,
    "Spreadsheet": """
    # Spreadsheet-like structure template
    agent1 = Agent(agent_name="Agent 1", system_prompt="Process data for column 1", task="Process column")
    agent2 = Agent(agent_name="Agent 2", system_prompt="Process data for column 2", task="Process column")
    workflow = GraphWorkflow()
    workflow.add_node(Node(id="agent1", type=NodeType.AGENT, agent=agent1))
    workflow.add_node(Node(id="agent2", type=NodeType.AGENT, agent=agent2))
    """,
    "Default": """
    # Default structure template
    agent1 = Agent(agent_name="Agent 1", system_prompt="General task processing", task="Handle task")
    workflow = GraphWorkflow()
    workflow.add_node(Node(id="agent1", type=NodeType.AGENT, agent=agent1))
    """
}

# Function to generate swarm configuration
def generate_swarm_configuration(structure: str) -> str:
    return swarm_templates.get(structure, swarm_templates["Default"])

# Seed examples
seed_examples = [
    "Customer Service, Chatbot Agent, Hierarchical structure",
    "AI Research, Data Collection Agent, Parallel structure",
    "E-commerce, Inventory Management Agent, Sequential structure",
    "Healthcare, Patient Tracking Agent, Hierarchical structure",
    "Finance, Risk Assessment Agent, Parallel structure",
    "Marketing, Ad Campaign Agent, Spreadsheet-like structure"
]

# Function to save JSON results
json_file_name = "agent1_results.json"
def save_to_json(file_name, data):
    if not os.path.exists(file_name):
        with open(file_name, "w") as f:
            json.dump([], f)
    with open(file_name, "r") as f:
        existing_data = json.load(f)
    existing_data.append(data)
    with open(file_name, "w") as f:
        json.dump(existing_data, f, indent=4)

# First agent: Organizational structure generation
first_agent = Agent(
    agent_name="Organizational Designer",
    system_prompt="""
    You are an expert in creating organizational structures. Based on the input examples, generate a unique and succinct configuration with:
    - Organizational structure
    - Swarm logic
    - Suggested verticals
    - Individual agent names and their system prompts
    Avoid repeating any of the provided examples.
    Example seed: {seed}
    """,
    llm=client,
    max_loops=1,
)

# Second agent: Python code generation for swarm configuration
second_agent = Agent(
    agent_name="Swarm Code Generator",
    system_prompt="""
    Generate Python code implementing the swarm structure based on the organizational structure.
    Proposed Structure: {org_structure}
    Swarm Template: {swarm_template}
    Do not regenerate the following boilerplate:
    {boilerplate_code}
    """,
    llm=client,
    max_loops=1,
)

# Define flow and swarm system
agents = [first_agent, second_agent]
flow = f"{first_agent.agent_name} -> {second_agent.agent_name}"

# Create the code refinement swarm system
code_refinement_system = AgentRearrange(
    name="SwarmSystem",
    description="System for organizing and generating code for swarm-based agents",
    agents=agents,
    flow=flow,
    max_loops=1,
    output_type="all",
)

# Main loop
def main_loop(seed_examples):
    used_seeds = set()
    for i, seed in enumerate(seed_examples):
        if seed in used_seeds:
            continue
        
        # Generate organizational structure for the current seed
        task_prompt = first_agent.system_prompt.format(seed=seed)  # Injecting seed into the prompt
        agent1_response = first_agent.run(task=task_prompt)
        
        if not agent1_response:
            print(f"Agent 1 failed to respond for seed: {seed}")
            continue
        
        save_to_json(json_file_name, agent1_response)

        # Parse response for organization structure
        org_structure_response = {}
        try:
            # Check if the response is a string and try to parse it as JSON
            if isinstance(agent1_response, str):
                org_structure_response = json.loads(agent1_response)
            else:
                org_structure_response = agent1_response
        except json.JSONDecodeError:
            org_structure_response = {"org_structure": "Default"}  # Default in case of invalid or unstructured response

        org_structure = org_structure_response.get("org_structure", "Default")

        if org_structure not in swarm_templates:
            org_structure = "Default"
        
        swarm_template = generate_swarm_configuration(org_structure)

        # Add new seeds from Agent 1 response
        new_seeds = org_structure_response.get("new_seeds", [])
        for new_seed in new_seeds:
            if new_seed not in seed_examples:
                seed_examples.append(new_seed)

        # Generate swarm code
        second_agent.system_prompt = second_agent.system_prompt.format(
            org_structure=org_structure, swarm_template=swarm_template, boilerplate_code=boilerplate_code
        )
        agent2_response = second_agent.run(task=f"Generate code for {org_structure} structure")

        # Save Python file
        file_name = f"swarm_{i + 1}_{org_structure.replace(' ', '_')}.py"
        with open(file_name, "w") as f:
            f.write(boilerplate_code)
            f.write(f"\n# {org_structure} Swarm\n")
            f.write(swarm_template)
            f.write("\n\n# Additional Code Generated by Agent 2\n")
            f.write(agent2_response)  # agent2_response is already a string
        print(f"Saved: {file_name}")

        used_seeds.add(seed)

if __name__ == "__main__":
    # Execute the agent flow
    code_refinement_system.run()
    main_loop(seed_examples)
